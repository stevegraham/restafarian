:presence: |
  function(property, options) {
    if(!this[property]) {
      return ["%s", {}];
    }
  }
:absence: |
  function(property, options) {
    if(this[property]) {
      return ["%s", {}];
    }
  }
:length: |
  function(property, options) {
    property = this[property];

    if(options.minimum && property.length < options.minimum) {
      return ["%s", { count: options.minimum }];
    }

    if(options.maximum && property.length > options.maximum) {
      return ["%s", { count: options.maximum }];
    }
  }
:acceptance: |
  function(property, options) {
    if(!this[property]) {
      return ["%s", {}];
    }
  }
:inclusion: |
  function(property, options) {
    if(options['in'].indexOf(this[property]) < 0) {
      return ["%s", {}];
    }
  }
:confirmation: |
  function(property, options) {
    if(this[property] != this[property + '_confirmation']) {
      return ["%s", {}];
    }
  }
:numericality: |
  function(property, options) {
    var number = parseInt(this[property], 10);
    if(!number) {
      return ["%s", {}];
    }

    if(options.only_integer && (String(number) != this[property])) {
      return ["%s", {}];
    }
  }
:exclusion: |
  function(property, options) {
    if(options['in'].indexOf(this[property]) > -1) {
      return ["%s", {}];
    }
  }
:format: |
  function(property, options) {
    var re = new RegExp(options.with);

    if(!this[property].match(re)) {
      return ["%s", {}];
    }
  }
