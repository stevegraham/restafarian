"use strict";

var Resource = {};

Resource.label = "<%= object_name %>";

Resource.persisted = <%= object.persisted? %>;

Resource.properties = <%= JSON.pretty_generate(object_typed_properties, indent: '  ') %>;

Resource.errors = <%= JSON.pretty_generate(I18n.t('errors.messages'), indent: '  ') %>;

Resource.validators = {
  "presence": function(property, options) {
    if(!this[property]) return ['blank', {}];
  },

  "absence": function(property, options) {
    if(this[property]) return ['present', {}];
  },

  "length": function(property, options) {
    property = this[property];

    if(options.minimum && property.length < options.minimum)
      return ['too_short', { count: 'minimum' }];
    if(options.maximum && property.length > options.maximum)
      return ['too_long',  { count: 'maximum' }];
  },

  "acceptance": function(property, options) {
    if(!this[property]) return ['accepted', {}];
  },

  "inclusion": function(property, options) {
    if(options['in'].indexOf(this[property]) < 0)
      return ['inclusion', {}];
  },

  "confirmation": function(property, options) {
    if(this[property] != this[property + '_confirmation'])
      return ['confirmation', { attribute: property }];
  },

  "numericality": function(property, options) {
    var number = parseInt(this[property], 10);
    if(!number) return ["not_a_number", {}];

    if(options.only_integer && (String(number) != this[property]))
      return ["not_an_integer", {}];
  }
}

Resource.error = function(error, params, options) {
  var message = this.errors[error];
  return message.replace(/%{(\w+)}/, function(match, capture) {
    return options[params[capture]];
  });
}

Resource.validate = function(representation) {
  var errors = {}, property, validator, options, error, message;

  for(property in this.properties) {
    errors[property] = [];

    for(validator in this.properties[property].validators) {
      options = this.properties[property].validators[validator];
      error = this.validators[validator].call(representation, property, options);

      if(error) {
        error.push(options)
        message = options.message || this.error.apply(this, error);
        errors[property].push(message);
      }
    }
  }

  return errors;
}
